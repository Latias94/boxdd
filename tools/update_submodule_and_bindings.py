#!/usr/bin/env python3
"""
Update Box2D submodule and pregenerate bindings for boxdd-sys.

Why: docs.rs builds are offline and cannot fetch submodules. To guarantee
successful docs.rs builds, we pre-generate Rust bindings and vendor headers
via submodules locally before publishing.

Usage examples:
  # Update submodule and pregenerate bindings (debug profile)
  python tools/update_submodule_and_bindings.py

  # Release profile
  python tools/update_submodule_and_bindings.py --profile release

  # Skip submodule update (only regenerate bindings)
  python tools/update_submodule_and_bindings.py --submodules skip

Requirements:
  - git, cargo in PATH
  - Python 3.7+
"""

import argparse
import os
import subprocess
import sys
from pathlib import Path


def run(cmd, cwd=None, env=None, dry=False):
    print("$", " ".join(cmd))
    if dry:
        return 0
    try:
        subprocess.check_call(cmd, cwd=cwd, env=env)
        return 0
    except subprocess.CalledProcessError as e:
        print(f"Command failed (exit {e.returncode}): {' '.join(cmd)}", file=sys.stderr)
        return e.returncode


def find_bindings(target_dir: Path, profile: str, crate: str) -> Path | None:
    build_dir = target_dir / profile / "build"
    if not build_dir.exists():
        return None
    for p in build_dir.glob(f"{crate}-*/out/bindings.rs"):
        return p
    return None


def main() -> int:
    parser = argparse.ArgumentParser(description="Update submodule and pregenerate bindings for boxdd-sys")
    parser.add_argument("--profile", default="debug", choices=["debug", "release"], help="Cargo profile")
    parser.add_argument("--submodules", default="update", choices=["update", "skip"], help="Whether to update submodules")
    parser.add_argument("--dry-run", action="store_true", help="Print commands only")
    args = parser.parse_args()

    repo_root = Path(__file__).resolve().parents[1]
    crate_root = repo_root / "boxdd-sys"
    submodule = crate_root / "third-party/box2d"

    if args.submodules == "update":
        print(f"Updating submodule: {submodule}")
        if not submodule.exists():
            rc = run(["git", "submodule", "update", "--init", "--recursive"], cwd=str(repo_root), dry=args.dry_run)
            if rc != 0:
                return rc
        else:
            rc = run(["git", "submodule", "update", "--init", "--recursive", "--remote"], cwd=str(repo_root), dry=args.dry_run)
            if rc != 0:
                return rc

    # Build to generate bindings, but skip native C build to speed up
    env = os.environ.copy()
    env["BOXDD_SYS_SKIP_CC"] = "1"
    profile_flag = ["--release"] if args.profile == "release" else []
    rc = run(["cargo", "build", "-p", "boxdd-sys", *profile_flag], cwd=str(repo_root), env=env, dry=args.dry_run)
    if rc != 0:
        return rc

    # Locate generated bindings in target dir
    target_dir = Path(env.get("CARGO_TARGET_DIR", repo_root / "target"))
    bindings = find_bindings(target_dir, args.profile, "boxdd-sys")
    if bindings is None or not bindings.exists():
        print(f"Generated bindings.rs not found under {target_dir / args.profile / 'build'}", file=sys.stderr)
        return 3

    # Copy to pregenerated file in crate root
    dest = crate_root / "src" / "bindings_pregenerated.rs"
    header = (
        "// AUTOGENERATED: pregenerated bindings for docs.rs/offline builds\n"
        "// To refresh, run tools/update_submodule_and_bindings.py\n\n"
    )
    if not args.dry_run:
        content = bindings.read_text(encoding="utf-8", errors="ignore")
        dest.write_text(header + content, encoding="utf-8")
    print(f"Updated pregenerated bindings: {dest}")

    print("Done.")
    return 0


if __name__ == "__main__":
    sys.exit(main())

